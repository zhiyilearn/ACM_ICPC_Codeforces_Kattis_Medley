/*
 *Codeforces Round #415 (Div. 2), problem: (C) Do you want a date?, Time limit exceeded on test 6, #
 * This is subset sloution, Problem link: http://codeforces.com/problemset/problem/810/C
 * Date: Nov 2017, Author: Zhiyi Li
 */
import java.util.*;
public class ProblemC {
	public static void main(String[] argc)
	{
		Scanner sc = new Scanner(System.in);
		int n;
		n = sc.nextInt();
		int[] numbers = new int[n];
		for(int i = 0; i < n; i++)
			numbers[i] = sc.nextInt();
		
		List<List<Integer>> res_List = subSet(numbers);
		
		int sum = 0;
		for(List com: res_List)
		{
			//System.out.println(com.toString());
			if(com.size() > 0)
			{
				Integer maxVal = Integer.MIN_VALUE;
				Integer minVal = Integer.MAX_VALUE;
			
				for(int i = 0; i < com.size(); i++)
				{
						if(maxVal < com.get(i).hashCode())
						{
							maxVal = com.get(i).hashCode();
						}
						
						if(minVal > com.get(i).hashCode())
						{
							minVal = com.get(i).hashCode();
						}
				}
				
				sum += maxVal.intValue() - minVal.intValue();
			}
		}
		System.out.println(sum);
		
	}
	
	public static List<List<Integer>> subSet(int[] numbers)
	{
		List<List<Integer>> list = new ArrayList<>();
		Arrays.sort(numbers);
		backtrack(list, new ArrayList<>(), numbers, 0);
		return list;
	}
	
	public static void backtrack(List<List<Integer>> list, List<Integer> tempList, int[] numbers, int start) {
		list.add(new ArrayList<>(tempList));
		for(int i = start; i < numbers.length; i++)
		{
			tempList.add(numbers[i]);
			backtrack(list, tempList, numbers, i+1);
			tempList.remove(tempList.size()-1);
		}
	}
}
